/*
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */
use crate::models::time_span_minutes::TimeSpanMinutes;


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CheckoutOptions {
    #[serde(rename = "speedPolicy", skip_serializing_if = "Option::is_none")]
    pub speed_policy: Option<crate::models::SpeedPolicy>,
    /// A specific set of payment methods to use for this invoice (ie. BTC, BTC-LightningNetwork). By default, select all payment methods enabled in the store.
    #[serde(rename = "paymentMethods", skip_serializing_if = "Option::is_none")]
    pub payment_methods: Option<Vec<String>>,
    /// Default payment type for the invoice (e.g., BTC, BTC-LightningNetwork). Default payment method set for the store is used if this parameter is not specified.
    #[serde(rename = "defaultPaymentMethod", skip_serializing_if = "Option::is_none")]
    pub default_payment_method: Option<String>,
    /// The number of minutes after which an invoice becomes expired. Defaults to the store's settings. (The default store settings is 15)
    #[serde(rename = "expirationMinutes", skip_serializing_if = "Option::is_none")]
    pub expiration_minutes: Option<Box<TimeSpanMinutes>>,
    /// The number of minutes after an invoice expired after which we are still monitoring for incoming payments. Defaults to the store's settings. (The default store settings is 1440, 1 day)
    #[serde(rename = "monitoringMinutes", skip_serializing_if = "Option::is_none")]
    pub monitoring_minutes: Option<Box<TimeSpanMinutes>>,
    /// A percentage determining whether to count the invoice as paid when the invoice is paid within the specified margin of error. Defaults to the store's settings. (The default store settings is 100)
    #[serde(rename = "paymentTolerance", skip_serializing_if = "Option::is_none")]
    pub payment_tolerance: Option<f64>,
    /// When the customer has paid the invoice, the URL where the customer will be redirected when clicking on the `return to store` button. You can use placeholders `{InvoiceId}` or `{OrderId}` in the URL, BTCPay Server will replace those with this invoice `id` or `metadata.orderId` respectively.
    #[serde(rename = "redirectURL", skip_serializing_if = "Option::is_none")]
    pub redirect_url: Option<String>,
    /// When the customer has paid the invoice, and a `redirectURL` is set, the checkout is redirected to `redirectURL` automatically if `redirectAutomatically` is true. Defaults to the store's settings. (The default store settings is false)
    #[serde(rename = "redirectAutomatically", skip_serializing_if = "Option::is_none")]
    pub redirect_automatically: Option<bool>,
    /// Invoice will require user to provide a refund email if this option is set to `true`. Has no effect if `buyerEmail` metadata is set as there is no email to collect in this case.
    #[serde(rename = "requiresRefundEmail", skip_serializing_if = "Option::is_none")]
    pub requires_refund_email: Option<bool>,
    /// The language code (eg. en-US, en, fr-FR...) of the language presented to your customer in the checkout page. BTCPay Server tries to match the best language available. If null or not set, will fallback on the store's default language. You can see the list of language codes with [this operation](#operation/langCodes).
    #[serde(rename = "defaultLanguage", skip_serializing_if = "Option::is_none")]
    pub default_language: Option<String>,
}

impl CheckoutOptions {
    pub fn new() -> CheckoutOptions {
        CheckoutOptions {
            speed_policy: None,
            payment_methods: None,
            default_payment_method: None,
            expiration_minutes: None,
            monitoring_minutes: None,
            payment_tolerance: None,
            redirect_url: None,
            redirect_automatically: None,
            requires_refund_email: None,
            default_language: None,
        }
    }
}



/*
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LightningInvoiceData {
    /// The invoice's ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::LightningInvoiceStatus>,
    /// The BOLT11 representation of the invoice
    #[serde(rename = "BOLT11", skip_serializing_if = "Option::is_none")]
    pub bolt11: Option<String>,
    /// The unix timestamp when the invoice got paid
    #[serde(rename = "paidAt", skip_serializing_if = "Option::is_none")]
    pub paid_at: Option<f32>,
    /// The unix timestamp when the invoice expires
    #[serde(rename = "expiresAt", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<f32>,
    /// The amount of the invoice in millisatoshi
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The amount received in millisatoshi
    #[serde(rename = "amountReceived", skip_serializing_if = "Option::is_none")]
    pub amount_received: Option<String>,
}

impl LightningInvoiceData {
    pub fn new() -> LightningInvoiceData {
        LightningInvoiceData {
            id: None,
            status: None,
            bolt11: None,
            paid_at: None,
            expires_at: None,
            amount: None,
            amount_received: None,
        }
    }
}



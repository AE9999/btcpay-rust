/*
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Payment {
    /// A unique identifier for this payment
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The date the payment was recorded
    #[serde(rename = "receivedDate", skip_serializing_if = "Option::is_none")]
    pub received_date: Option<f32>,
    /// The value of the payment
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// The fee paid for the payment
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::PaymentStatus>,
    /// The destination the payment was made to
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
}

impl Payment {
    pub fn new() -> Payment {
        Payment {
            id: None,
            received_date: None,
            value: None,
            fee: None,
            status: None,
            destination: None,
        }
    }
}



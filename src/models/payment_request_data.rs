/*
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PaymentRequestData {
    /// The amount of the payment request
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The title of the payment request
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The currency of the payment request. If empty, the store's default currency code will be used.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// The email used in invoices generated by the payment request
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// The description of the payment request
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The expiry date of the payment request
    #[serde(rename = "expiryDate", skip_serializing_if = "Option::is_none")]
    pub expiry_date: Option<Box<f32>>,
    /// Custom CSS styling for the payment request
    #[serde(rename = "embeddedCSS", skip_serializing_if = "Option::is_none")]
    pub embedded_css: Option<String>,
    /// Custom CSS link for styling the payment request
    #[serde(rename = "customCSSLink", skip_serializing_if = "Option::is_none")]
    pub custom_css_link: Option<String>,
    /// Whether to allow users to create invoices that partially pay the payment request 
    #[serde(rename = "allowCustomPaymentAmounts", skip_serializing_if = "Option::is_none")]
    pub allow_custom_payment_amounts: Option<bool>,
    /// The id of the payment request
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The store identifier that the payment request belongs to
    #[serde(rename = "storeId", skip_serializing_if = "Option::is_none")]
    pub store_id: Option<String>,
    /// The status of the payment request
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The creation date of the payment request
    #[serde(rename = "createdTime", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<Box<f32>>,
}

impl PaymentRequestData {
    pub fn new() -> PaymentRequestData {
        PaymentRequestData {
            amount: None,
            title: None,
            currency: None,
            email: None,
            description: None,
            expiry_date: None,
            embedded_css: None,
            custom_css_link: None,
            allow_custom_payment_amounts: None,
            id: None,
            store_id: None,
            status: None,
            created_time: None,
        }
    }
}

/// The status of the payment request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Pending")]
    Pending,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "Expired")]
    Expired,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}


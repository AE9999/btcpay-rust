/*
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApplicationServerInfoData {
    /// BTCPay Server version
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// The Tor hostname
    #[serde(rename = "onion", skip_serializing_if = "Option::is_none")]
    pub onion: Option<String>,
    /// The payment methods this server supports
    #[serde(rename = "supportedPaymentMethods", skip_serializing_if = "Option::is_none")]
    pub supported_payment_methods: Option<Vec<String>>,
    /// True if the instance is fully synchronized, according to NBXplorer
    #[serde(rename = "fullySynched", skip_serializing_if = "Option::is_none")]
    pub fully_synched: Option<bool>,
    #[serde(rename = "syncStatus", skip_serializing_if = "Option::is_none")]
    pub sync_status: Option<Vec<crate::models::ApplicationServerInfoSyncStatusData>>,
}

impl ApplicationServerInfoData {
    pub fn new() -> ApplicationServerInfoData {
        ApplicationServerInfoData {
            version: None,
            onion: None,
            supported_payment_methods: None,
            fully_synched: None,
            sync_status: None,
        }
    }
}


